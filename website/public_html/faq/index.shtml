<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
<title>QStat FAQs</title>
<!--#include virtual="/inc/header.html" -->
</head>

<body>
<div id="container">
<div class="leftblock">
<!--#include virtual="/inc/nav.html" -->
</div>
<div class="rightblock">
  <h1 align="right">QStat FAQs</h1>
  <h3>Contents</h3>
  <dl>
<dt>1. Most Frequently Asked Questions
    <dl>
    <dt>1.1 <a href="#1.1">How do I run QStat?</a>
    <dt>1.2 <a href="#1.2">Does QStat support game XYZ?</a>
    <dt>1.3 <a href="#1.3">When will QStat support game XYZ?</a>
    <dt>1.4 <a href="#1.4">Why can't I use the GameSpy master servers?</a>
    <dt>1.5 <a href="#1.5">How can I make a status web page for my server?</a>
    </dl>
<dt>2. Less Frequently Asked Questions
    <dl>
    <dt>2.1 <a href="#2.1">How do I use QStat with IRC?</a>
    <dt>2.2 <a href="#2.2">Is there a DLL or ActiveX version of QStat?</a>
    <dt>2.3 <a href="#2.3">Does QStat support Visual Basic?</a>
    <dt>2.4 <a href="#2.4">What is the query protocol for game XYZ?</a>
    <dt>2.5 <a href="#2.5">How do I write something like QStat in Visual Basic/Java/Perl/PHP?</a>
    </dl>
</dl>


  <h3>Answers</h3>
  <h3>1. Most Frequently Asked Questions</h3>
<a name="1.1">
<h4>1.1 How do I run QStat?</h4>
</a>
QStat is a command-line text program.  It does not have a window, menus,
or buttons.  To run QStat, you will need the qstat program.  The
QStat program is called "qstat" on Linux/Unix and "qstat.exe" on Windows.  
The Windows binary can be found in "win32/qstat.exe" of the QStat
ZIP file.

<p>
QStat can be run in a command window.  Examples on Unix/Linux are xterm,
gnome-terminal, and dtterm.  On Windows 9x use command.exe.  On Windows
NT/2000/XP, use cmd.exe.

<p>
At the prompt, run qstat like this:
<pre>
qstat -P -hls 203.17.15.220:27018
</pre>
This will get status from the Half-Life server (-hls) at 203.17.15.220:27018
and include player information (-P).  You should see output something like
this:
<pre>
ADDRESS           PLAYERS      MAP   RESPONSE TIME    NAME
203.17.15.220:27018   18/25      de_dust     86 / 0  cstrike SGL CStrike 1.5 (Dust Only)
          0 frags     1m34s GTO
          1 frags    19m 7s NoodlePower
          1 frags    16m17s FoddeR
          2 frags     6m40s _cam
          2 frags  1h 2m46s AK-47
          0 frags     9m44s GUINNESS
          0 frags  1h32m 7s ING
          0 frags  1h 5m36s ~{ FraG S.O.B }~
          0 frags  1h 0m55s ~{ Live2Die S.O.B }~
          0 frags  1h 4m59s 007
          0 frags    13m17s boneros
          3 frags    53m 4s TKT.yl
          1 frags  1h 0m35s a
          0 frags    13m 6s [- Br3nDaNw0r -]
          0 frags    36m20s Blue
          0 frags    43m 5s .
          1 frags    31m26s Dimsum | OnG
</pre>
QStat can output the human readable format above and a raw and XML format.
<p>
To output in raw format, run qstat with the -raw flag:

<pre>
qstat -raw __ -P -hls 203.17.15.220:27018
</pre>

The characters after -raw will be put between each piece of data.
For example:

<pre>
HLS__203.17.15.220:27018_|SGL CStrike 1.5 (Dust Only)__de_dust__25__20__102__0
GTO__1__317
NoodlePower__6__1370
FoddeR__3__1201
_cam__11__624
AK-47__3__3990
GUINNESS__0__808
ING__2__5751
Dragon-X__3__223
~{ FraG S.O.B }~__0__4160
~{ Live2Die S.O.B }~__1__3879
Skitzah__0__38
boneros__2__1020
TKT.yl__8__3408
a__1__3859
Gunja-Monkey__0__128
[- Br3nDaNw0r -]__0__1010
-=[Saint Pedigree]=-__0__155
Blue__2__2403
Dimsum | OnG__2__2109
</pre>

To output in XML format, run qstat with the -xml flag:

<pre>
qstat -xml -P -hls 203.17.15.220:27018
</pre>

XML is extremely verbose.  The output will look something like this:

<pre>
&lt;qstat>
        &lt;server type="HLS" address="203.17.15.220:27018" status="UP">
                &lt;hostname>203.17.15.220:27018&lt;/hostname>
                &lt;name>OzForces.Com|SGL CStrike 1.5 (Dust Only)&lt;/name>
                &lt;gametype>cstrike&lt;/gametype>
                &lt;map>de_dust&lt;/map>
                &lt;numplayers>21&lt;/numplayers>
                &lt;maxplayers>25&lt;/maxplayers>
                &lt;ping>85&lt;/ping>
                &lt;retries>0&lt;/retries>
                &lt;players>
                        &lt;player>
                                &lt;name>GTO&lt;/name>
                                &lt;score>1&lt;/score>
                                &lt;time>    6m19s&lt;/time>
                        &lt;/player>
</pre>



Finally, QStat has a template output mode.  You can write template
files that describe exactly how output should be formatted.  This is
useful for generating web pages.  See "How can I make a status web
page for my server?"
<br>
<br>

<a name="1.2">
<h4>1.2 Does QStat support game XYZ?</h4>
QStat supports most first person shooter (FPS) style games.  These
are games like Quake, Unreal, and Half-Life.  The QStat documentation
and web page (<a href="http://www.qstat.org">http://www.qstat.org</a>) list many of the supported games.
<p>
QStat supports games beyond those listed in the documentation.  This
works because most new games use a network protocol similar to an
existing game.  The two most common protocols are Unreal and Quake.
If QStat does not include a flag for your game, then try the -uns
(Unreal) and -q3s (Quake 3) flags with your server's IP address and
game port.  For example:

<pre>
qstat -uns 10.10.128.1:25000

qstat -q3s 10.10.128.1:29000
</pre>

If the status of your server is displayed, then qstat supports the
game.
<p>
QStat can be configured with new flags by using a QStat configuration
file.  The qstat package includes a default config file called qstat.cfg.
Additional game types can be added to this file with a text editor.
Kingley Foreman maintains a list of additional qstat configs on his
web site (<a href="http://qstat.uglypunk.com">http://qstat.uglypunk.com</a>).
If you want to write your own
qstat configs, see the QStat documentation
(<a href="http://www.qstat.org/qstatdoc.html">http://www.qstat.org/qstatdoc.html</a>).
<br><br>

<a name="1.3">
<h4>1.3 When will QStat support game XYZ?</h4>
The game might already be supported, see <a href="#1.2">Does QStat support game XYZ?</a>
<p>
If the game is using a new protocol, then someone will need to modify
qstat to support the game.  The programming is usually done by the QStat
author (Steve Jankowski) or contributed by another programmer.  When
the programming will be done depends on a number of factors:
<ul>
<li> Does Steve or someone else have time to write the code?
<li> Is there a document describing the protocol?  Or, at least, the
  format of the request packet?   Steve and others can reverse-
  engineer a game status protocol, but this takes much longer.  If
  you know of a document, email, or forum post describing a status
  query protocol, please tell Steve.
<li> Does Steve have time to integrate contributed code and roll a release?
</ul>
<p>
QStat is moving toward a more open development model (using SourceForge).
This should allow contributed code to become available much sooner, but
without much testing.
<br><br>


<a name="1.4">
<h4>1.4 Why can't I use the GameSpy master servers?</h4>
GameSpy protects their master server lists using a secret
challenge-response algorithm.  QStat does not know the algorithm
so cannot access the server lists.
<br><br>


<a name="1.5">
<h4>1.5 How can I make a status web page for my server?</h4>
<i>big question</i>

<p>
Use an existing server status provider: <a href="http://www.serverspy.net/site/monitor/">http://www.serverspy.net</a>
<br><br>


<h3>2. Less Frequently Asked Questions</h3>

<a name="2.1">
<h4>2.1 How do I use QStat with IRC?</h4>
I don't use IRC and don't know anything about programming IRC scripts.
The QStat derived works page lists several IRC utilities that use qstat,
including:
<ul>
<li> <a href="http://vkoslak.dynip.com/cgi-bin/qupdates.cgi">http://vkoslak.dynip.com/cgi-bin/qupdates.cgi</a>
<li> <a href="http://micke.peachpuff.com/eggdrop/qstat4eggdrop.html">http://micke.peachpuff.com/eggdrop/qstat4eggdrop.html</a>
<li> <a href="http://cowboyscripts.org/?page=superip">http://cowboyscripts.org/?page=superip</a>
</ul>
<br>

<a name="2.2">
<h4>2.2 Is there a DLL or ActiveX version of QStat?</h4>

<p>
No.  There have been many requests for this feature, but adding it is
a significant undertaking.  I wouldn't rule it out completely, but
QStat may never support DLL or ActiveX.
<br><br>


<a name="2.3">
<h4>2.3 Does QStat support Visual Basic?</h4>
<p>
See 1.7.  But you can run qstat.exe from Visual Basic and output to a file
(-of flag), then parse the file in VB.
<br><br>


<a name="2.4">
<h4>2.4 What is the query protocol for game XYZ?</h4>
The QStat Network Protocol page (<a href="http://www.qstat.org/qprotocol.html">http://www.qstat.org/qprotocol.html</a>) includes
links to some game status protocol descriptions.  But most of them are
for old games.  I have not written any documents myself.
<p>
I usually figure out game protocols using reverse engineering.  I use
network snoop tools like 'tcpdump' to capture network packets.  Some
protocols are text-based and fairly simple to decipher.  Some use a
binary encoding and are <b>much</b> harder to figure out.
<p>
I use Unix based tools like tcpdump.  On Windows, try NetworkActiv
sniffer (<a href="http://www.networkactiv.com/Sniffer.html">http://www.networkactiv.com/Sniffer.html</a>).  Also on Windows,
but command-line based is InetWatch 0.95.
<p>
I've heard that network sniffers generally don't work on modem
connections.  An alternative for Windows is to use a winsock sniffer.
The only one I know of is TCP Spy
(<a href="http://www.westbrooksoftware.com/tsdetails.shtml">http://www.westbrooksoftware.com/tsdetails.shtml</a>) which is free
if you can live with a 32K buffer.
<p>
Finally, QStat has a debug mode (-d) that will print all received packets.
Once you know the request packet, you can write a QStat config with
a "status packet" entry.  Then run qstat with the -d flag using the new
game type.
<br><br>


<a name="2.5">
<h4>2.5 How do I write something like QStat in Visual Basic/Java/Perl/PHP?</h4>
While I know Java and a little Perl and PHP, I don't have time to be a
teacher.  I suggest looking for existing open source game server browsers
to see how they work.
<br><br>

</div>
<div class="clear"></div>
</div>
</body>
</html>
